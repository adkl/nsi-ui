/**
 * NSI.Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { AddRuleDomain } from '../model/addRuleDomain';
import { RuleDomain } from '../model/ruleDomain';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class RuleService {

    protected basePath = 'https://localhost:44349';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Adds new rule
     * 
     * @param rule 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public ruleAddRule(rule: AddRuleDomain, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public ruleAddRule(rule: AddRuleDomain, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public ruleAddRule(rule: AddRuleDomain, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public ruleAddRule(rule: AddRuleDomain, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (rule === null || rule === undefined) {
            throw new Error('Required parameter rule was null or undefined when calling ruleAddRule.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/Rule/AddRule`,
            rule,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete rule
     * 
     * @param ruleId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public ruleDeleteRule(ruleId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public ruleDeleteRule(ruleId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public ruleDeleteRule(ruleId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public ruleDeleteRule(ruleId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (ruleId === null || ruleId === undefined) {
            throw new Error('Required parameter ruleId was null or undefined when calling ruleDeleteRule.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (ruleId !== undefined) {
            queryParameters = queryParameters.set('ruleId', <any>ruleId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/Rule/DeleteRule`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves all rules from system
     * 
     * @param requestFilterCriteria 
     * @param requestPagingPage 
     * @param requestPagingTotalRecords 
     * @param requestPagingRecordsPerPage 
     * @param requestPagingPages 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public ruleGet(requestFilterCriteria?: Array<string>, requestPagingPage?: number, requestPagingTotalRecords?: number, requestPagingRecordsPerPage?: number, requestPagingPages?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public ruleGet(requestFilterCriteria?: Array<string>, requestPagingPage?: number, requestPagingTotalRecords?: number, requestPagingRecordsPerPage?: number, requestPagingPages?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public ruleGet(requestFilterCriteria?: Array<string>, requestPagingPage?: number, requestPagingTotalRecords?: number, requestPagingRecordsPerPage?: number, requestPagingPages?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public ruleGet(requestFilterCriteria?: Array<string>, requestPagingPage?: number, requestPagingTotalRecords?: number, requestPagingRecordsPerPage?: number, requestPagingPages?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (requestFilterCriteria) {
            requestFilterCriteria.forEach((element) => {
                queryParameters = queryParameters.append('request.filterCriteria', <any>element);
            })
        }
        if (requestPagingPage !== undefined) {
            queryParameters = queryParameters.set('request.paging.page', <any>requestPagingPage);
        }
        if (requestPagingTotalRecords !== undefined) {
            queryParameters = queryParameters.set('request.paging.totalRecords', <any>requestPagingTotalRecords);
        }
        if (requestPagingRecordsPerPage !== undefined) {
            queryParameters = queryParameters.set('request.paging.recordsPerPage', <any>requestPagingRecordsPerPage);
        }
        if (requestPagingPages !== undefined) {
            queryParameters = queryParameters.set('request.paging.pages', <any>requestPagingPages);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/Rule/Get`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves rule by provided id
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public ruleGet_1(id: number, observe?: 'body', reportProgress?: boolean): Observable<RuleDomain>;
    public ruleGet_1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RuleDomain>>;
    public ruleGet_1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RuleDomain>>;
    public ruleGet_1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling ruleGet_1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<RuleDomain>(`${this.basePath}/api/Rule/Get/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
