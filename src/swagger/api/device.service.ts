/**
 * NSI.Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { CreateDeviceDomain } from '../model/createDeviceDomain';
import { DeviceDomain } from '../model/deviceDomain';
import { UpdateDeviceDomain } from '../model/updateDeviceDomain';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DeviceService {

    protected basePath = 'https://localhost:44349';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Creates device
     * 
     * @param device 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deviceCreateDevice(device: CreateDeviceDomain, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deviceCreateDevice(device: CreateDeviceDomain, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deviceCreateDevice(device: CreateDeviceDomain, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deviceCreateDevice(device: CreateDeviceDomain, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (device === null || device === undefined) {
            throw new Error('Required parameter device was null or undefined when calling deviceCreateDevice.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/Device/CreateDevice`,
            device,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes device
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deviceDelete(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deviceDelete(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deviceDelete(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deviceDelete(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deviceDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/Device/Delete/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves all devices from system with pagination
     * 
     * @param page 
     * @param size 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deviceGet(page: number, size: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deviceGet(page: number, size: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deviceGet(page: number, size: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deviceGet(page: number, size: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (page === null || page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling deviceGet.');
        }
        if (size === null || size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling deviceGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined) {
            queryParameters = queryParameters.set('size', <any>size);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/Devices`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves all active devices from system
     * 
     * @param page 
     * @param size 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deviceGetActiveDevices(page: number, size: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deviceGetActiveDevices(page: number, size: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deviceGetActiveDevices(page: number, size: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deviceGetActiveDevices(page: number, size: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (page === null || page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling deviceGetActiveDevices.');
        }
        if (size === null || size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling deviceGetActiveDevices.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined) {
            queryParameters = queryParameters.set('size', <any>size);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/Devices/Active`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves all inactive devices from system
     * 
     * @param page 
     * @param size 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deviceGetInactiveDevices(page: number, size: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deviceGetInactiveDevices(page: number, size: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deviceGetInactiveDevices(page: number, size: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deviceGetInactiveDevices(page: number, size: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (page === null || page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling deviceGetInactiveDevices.');
        }
        if (size === null || size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling deviceGetInactiveDevices.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined) {
            queryParameters = queryParameters.set('size', <any>size);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/Devices/Inactive`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves number of incidents for provided device in provided number of last days
     * 
     * @param deviceId 
     * @param periodInDays 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deviceGetNumberOfIncidents(deviceId: number, periodInDays: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deviceGetNumberOfIncidents(deviceId: number, periodInDays: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deviceGetNumberOfIncidents(deviceId: number, periodInDays: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deviceGetNumberOfIncidents(deviceId: number, periodInDays: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (deviceId === null || deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling deviceGetNumberOfIncidents.');
        }
        if (periodInDays === null || periodInDays === undefined) {
            throw new Error('Required parameter periodInDays was null or undefined when calling deviceGetNumberOfIncidents.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (deviceId !== undefined) {
            queryParameters = queryParameters.set('deviceId', <any>deviceId);
        }
        if (periodInDays !== undefined) {
            queryParameters = queryParameters.set('periodInDays', <any>periodInDays);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/Device/GetNumberOfIncidents`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves all devices from system
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deviceGet_1(observe?: 'body', reportProgress?: boolean): Observable<Array<DeviceDomain>>;
    public deviceGet_1(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DeviceDomain>>>;
    public deviceGet_1(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DeviceDomain>>>;
    public deviceGet_1(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<DeviceDomain>>(`${this.basePath}/api/Device/Get`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves device by provided id
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deviceGet_2(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deviceGet_2(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deviceGet_2(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deviceGet_2(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deviceGet_2.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/Device/Get/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Searches for devices from system
     * 
     * @param page 
     * @param size 
     * @param s 
     * @param filtered 
     * @param active 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deviceSearchDevices(page: number, size: number, s: string, filtered?: boolean, active?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deviceSearchDevices(page: number, size: number, s: string, filtered?: boolean, active?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deviceSearchDevices(page: number, size: number, s: string, filtered?: boolean, active?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deviceSearchDevices(page: number, size: number, s: string, filtered?: boolean, active?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (page === null || page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling deviceSearchDevices.');
        }
        if (size === null || size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling deviceSearchDevices.');
        }
        if (s === null || s === undefined) {
            throw new Error('Required parameter s was null or undefined when calling deviceSearchDevices.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (s !== undefined) {
            queryParameters = queryParameters.set('s', <any>s);
        }
        if (filtered !== undefined) {
            queryParameters = queryParameters.set('filtered', <any>filtered);
        }
        if (active !== undefined) {
            queryParameters = queryParameters.set('active', <any>active);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/Devices/Search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates device
     * 
     * @param device 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deviceUpdateDevice(device: UpdateDeviceDomain, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deviceUpdateDevice(device: UpdateDeviceDomain, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deviceUpdateDevice(device: UpdateDeviceDomain, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deviceUpdateDevice(device: UpdateDeviceDomain, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (device === null || device === undefined) {
            throw new Error('Required parameter device was null or undefined when calling deviceUpdateDevice.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/Device/UpdateDevice`,
            device,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
