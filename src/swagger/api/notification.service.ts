/**
 * NSI.Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { AddNotificationRequest } from '../model/addNotificationRequest';
import { AddNotificationResponse } from '../model/addNotificationResponse';
import { DeleteNotificationResponse } from '../model/deleteNotificationResponse';
import { GetAllNotificationsResponse } from '../model/getAllNotificationsResponse';
import { GetNotificationByCreatedDateResponse } from '../model/getNotificationByCreatedDateResponse';
import { GetNotificationByExternalIdResponse } from '../model/getNotificationByExternalIdResponse';
import { GetNotificationByIdResponse } from '../model/getNotificationByIdResponse';
import { UpdateNotificationRequest } from '../model/updateNotificationRequest';
import { UpdateNotificationResponse } from '../model/updateNotificationResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class NotificationService {

    protected basePath = 'https://localhost:44349';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Adds new notification
     * 
     * @param request {NSI.DataContracts.Notification.AddNotificationRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationAdd(request: AddNotificationRequest, observe?: 'body', reportProgress?: boolean): Observable<AddNotificationResponse>;
    public notificationAdd(request: AddNotificationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AddNotificationResponse>>;
    public notificationAdd(request: AddNotificationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AddNotificationResponse>>;
    public notificationAdd(request: AddNotificationRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling notificationAdd.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<AddNotificationResponse>(`${this.basePath}/api/Notification/Add`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes notification
     * 
     * @param notificationId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationDelete(notificationId: number, observe?: 'body', reportProgress?: boolean): Observable<DeleteNotificationResponse>;
    public notificationDelete(notificationId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DeleteNotificationResponse>>;
    public notificationDelete(notificationId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DeleteNotificationResponse>>;
    public notificationDelete(notificationId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (notificationId === null || notificationId === undefined) {
            throw new Error('Required parameter notificationId was null or undefined when calling notificationDelete.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (notificationId !== undefined) {
            queryParameters = queryParameters.set('notificationId', <any>notificationId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<DeleteNotificationResponse>(`${this.basePath}/api/Notification/Delete`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves all notifications
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationGetAll(observe?: 'body', reportProgress?: boolean): Observable<GetAllNotificationsResponse>;
    public notificationGetAll(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetAllNotificationsResponse>>;
    public notificationGetAll(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetAllNotificationsResponse>>;
    public notificationGetAll(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<GetAllNotificationsResponse>(`${this.basePath}/api/Notification/GetAll`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves all notifications by provided notification created date (YYYY-MM-DD) in request
     * 
     * @param createdDate {System.DateTime}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationGetByCreatedDate(createdDate: Date, observe?: 'body', reportProgress?: boolean): Observable<GetNotificationByCreatedDateResponse>;
    public notificationGetByCreatedDate(createdDate: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetNotificationByCreatedDateResponse>>;
    public notificationGetByCreatedDate(createdDate: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetNotificationByCreatedDateResponse>>;
    public notificationGetByCreatedDate(createdDate: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (createdDate === null || createdDate === undefined) {
            throw new Error('Required parameter createdDate was null or undefined when calling notificationGetByCreatedDate.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (createdDate !== undefined) {
            queryParameters = queryParameters.set('CreatedDate', <any>createdDate.toISOString());
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetNotificationByCreatedDateResponse>(`${this.basePath}/api/Notification/GetByCreatedDate`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves all notifications by provided notification external ID in request
     * 
     * @param guid {System.Guid}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationGetByExternalId(guid: string, observe?: 'body', reportProgress?: boolean): Observable<GetNotificationByExternalIdResponse>;
    public notificationGetByExternalId(guid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetNotificationByExternalIdResponse>>;
    public notificationGetByExternalId(guid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetNotificationByExternalIdResponse>>;
    public notificationGetByExternalId(guid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (guid === null || guid === undefined) {
            throw new Error('Required parameter guid was null or undefined when calling notificationGetByExternalId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (guid !== undefined) {
            queryParameters = queryParameters.set('guid', <any>guid);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetNotificationByExternalIdResponse>(`${this.basePath}/api/Notification/GetByExternalId`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves a single notification by provided notification ID in request
     * 
     * @param id {System.Int32}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationGetById(id: number, observe?: 'body', reportProgress?: boolean): Observable<GetNotificationByIdResponse>;
    public notificationGetById(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetNotificationByIdResponse>>;
    public notificationGetById(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetNotificationByIdResponse>>;
    public notificationGetById(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling notificationGetById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetNotificationByIdResponse>(`${this.basePath}/api/Notification/GetById/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates notification
     * 
     * @param request {NSI.DataContracts.Notification.UpdateNotificationRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationUpdate(request: UpdateNotificationRequest, observe?: 'body', reportProgress?: boolean): Observable<UpdateNotificationResponse>;
    public notificationUpdate(request: UpdateNotificationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UpdateNotificationResponse>>;
    public notificationUpdate(request: UpdateNotificationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UpdateNotificationResponse>>;
    public notificationUpdate(request: UpdateNotificationRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling notificationUpdate.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<UpdateNotificationResponse>(`${this.basePath}/api/Notification/Update`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
