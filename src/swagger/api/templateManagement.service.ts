/**
 * NSI.Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { CreateFolderRequest } from '../model/createFolderRequest';
import { CreateFolderResponse } from '../model/createFolderResponse';
import { CreateTemplateRequest } from '../model/createTemplateRequest';
import { CreateTemplateResponse } from '../model/createTemplateResponse';
import { CreateTemplateVersionRequest } from '../model/createTemplateVersionRequest';
import { CreateTemplateVersionResponse } from '../model/createTemplateVersionResponse';
import { DeleteTemplateResponse } from '../model/deleteTemplateResponse';
import { DeleteTemplateVersionResponse } from '../model/deleteTemplateVersionResponse';
import { GetFoldersResponse } from '../model/getFoldersResponse';
import { GetTemplateVersionResponse } from '../model/getTemplateVersionResponse';
import { GetTemplateVersionsResponse } from '../model/getTemplateVersionsResponse';
import { GetTemplatesResponse } from '../model/getTemplatesResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TemplateManagementService {

    protected basePath = 'https://localhost:44349';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Creates folder
     * 
     * @param folder 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public templateManagementCreateFolder(folder: CreateFolderRequest, observe?: 'body', reportProgress?: boolean): Observable<CreateFolderResponse>;
    public templateManagementCreateFolder(folder: CreateFolderRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CreateFolderResponse>>;
    public templateManagementCreateFolder(folder: CreateFolderRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CreateFolderResponse>>;
    public templateManagementCreateFolder(folder: CreateFolderRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (folder === null || folder === undefined) {
            throw new Error('Required parameter folder was null or undefined when calling templateManagementCreateFolder.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<CreateFolderResponse>(`${this.basePath}/api/TemplateManagement/CreateFolder`,
            folder,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates template
     * 
     * @param template 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public templateManagementCreateTemplate(template: CreateTemplateRequest, observe?: 'body', reportProgress?: boolean): Observable<CreateTemplateResponse>;
    public templateManagementCreateTemplate(template: CreateTemplateRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CreateTemplateResponse>>;
    public templateManagementCreateTemplate(template: CreateTemplateRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CreateTemplateResponse>>;
    public templateManagementCreateTemplate(template: CreateTemplateRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (template === null || template === undefined) {
            throw new Error('Required parameter template was null or undefined when calling templateManagementCreateTemplate.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<CreateTemplateResponse>(`${this.basePath}/api/TemplateManagement/CreateTemplate`,
            template,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates template version
     * 
     * @param template 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public templateManagementCreateTemplateVersion(template: CreateTemplateVersionRequest, observe?: 'body', reportProgress?: boolean): Observable<CreateTemplateVersionResponse>;
    public templateManagementCreateTemplateVersion(template: CreateTemplateVersionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CreateTemplateVersionResponse>>;
    public templateManagementCreateTemplateVersion(template: CreateTemplateVersionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CreateTemplateVersionResponse>>;
    public templateManagementCreateTemplateVersion(template: CreateTemplateVersionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (template === null || template === undefined) {
            throw new Error('Required parameter template was null or undefined when calling templateManagementCreateTemplateVersion.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<CreateTemplateVersionResponse>(`${this.basePath}/api/TemplateManagement/CreateTemplateVersion`,
            template,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete template by template version Id
     * 
     * @param templateVersionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public templateManagementDeleteTemplateByTemplateVersionId(templateVersionId: number, observe?: 'body', reportProgress?: boolean): Observable<DeleteTemplateResponse>;
    public templateManagementDeleteTemplateByTemplateVersionId(templateVersionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DeleteTemplateResponse>>;
    public templateManagementDeleteTemplateByTemplateVersionId(templateVersionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DeleteTemplateResponse>>;
    public templateManagementDeleteTemplateByTemplateVersionId(templateVersionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (templateVersionId === null || templateVersionId === undefined) {
            throw new Error('Required parameter templateVersionId was null or undefined when calling templateManagementDeleteTemplateByTemplateVersionId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (templateVersionId !== undefined) {
            queryParameters = queryParameters.set('templateVersionId', <any>templateVersionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<DeleteTemplateResponse>(`${this.basePath}/api/TemplateManagement/DeleteTemplateByTemplateVersionId`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete template version by Id
     * 
     * @param templateVersionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public templateManagementDeleteTemplateVersion(templateVersionId: number, observe?: 'body', reportProgress?: boolean): Observable<DeleteTemplateVersionResponse>;
    public templateManagementDeleteTemplateVersion(templateVersionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DeleteTemplateVersionResponse>>;
    public templateManagementDeleteTemplateVersion(templateVersionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DeleteTemplateVersionResponse>>;
    public templateManagementDeleteTemplateVersion(templateVersionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (templateVersionId === null || templateVersionId === undefined) {
            throw new Error('Required parameter templateVersionId was null or undefined when calling templateManagementDeleteTemplateVersion.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (templateVersionId !== undefined) {
            queryParameters = queryParameters.set('templateVersionId', <any>templateVersionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<DeleteTemplateVersionResponse>(`${this.basePath}/api/TemplateManagement/DeleteTemplateVersion`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Exports html template version by Id
     * 
     * @param templateVersionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public templateManagementExportTemplateToHtml(templateVersionId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public templateManagementExportTemplateToHtml(templateVersionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public templateManagementExportTemplateToHtml(templateVersionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public templateManagementExportTemplateToHtml(templateVersionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (templateVersionId === null || templateVersionId === undefined) {
            throw new Error('Required parameter templateVersionId was null or undefined when calling templateManagementExportTemplateToHtml.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (templateVersionId !== undefined) {
            queryParameters = queryParameters.set('templateVersionId', <any>templateVersionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/TemplateManagement/ExportTemplateToHtml`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Exports pdf template version by Id
     * 
     * @param templateVersionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public templateManagementExportTemplateToPdf(templateVersionId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public templateManagementExportTemplateToPdf(templateVersionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public templateManagementExportTemplateToPdf(templateVersionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public templateManagementExportTemplateToPdf(templateVersionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (templateVersionId === null || templateVersionId === undefined) {
            throw new Error('Required parameter templateVersionId was null or undefined when calling templateManagementExportTemplateToPdf.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (templateVersionId !== undefined) {
            queryParameters = queryParameters.set('templateVersionId', <any>templateVersionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/TemplateManagement/ExportTemplateToPdf`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets all templates. Paging, sorting and filtering can be specified in the request
     * 
     * @param requestFilterCriteria 
     * @param requestSortCriteria 
     * @param requestPagingPage 
     * @param requestPagingTotalRecords 
     * @param requestPagingRecordsPerPage 
     * @param requestPagingPages 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public templateManagementGetAll(requestFilterCriteria?: Array<string>, requestSortCriteria?: Array<string>, requestPagingPage?: number, requestPagingTotalRecords?: number, requestPagingRecordsPerPage?: number, requestPagingPages?: number, observe?: 'body', reportProgress?: boolean): Observable<GetTemplatesResponse>;
    public templateManagementGetAll(requestFilterCriteria?: Array<string>, requestSortCriteria?: Array<string>, requestPagingPage?: number, requestPagingTotalRecords?: number, requestPagingRecordsPerPage?: number, requestPagingPages?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetTemplatesResponse>>;
    public templateManagementGetAll(requestFilterCriteria?: Array<string>, requestSortCriteria?: Array<string>, requestPagingPage?: number, requestPagingTotalRecords?: number, requestPagingRecordsPerPage?: number, requestPagingPages?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetTemplatesResponse>>;
    public templateManagementGetAll(requestFilterCriteria?: Array<string>, requestSortCriteria?: Array<string>, requestPagingPage?: number, requestPagingTotalRecords?: number, requestPagingRecordsPerPage?: number, requestPagingPages?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (requestFilterCriteria) {
            requestFilterCriteria.forEach((element) => {
                queryParameters = queryParameters.append('request.filterCriteria', <any>element);
            })
        }
        if (requestSortCriteria) {
            requestSortCriteria.forEach((element) => {
                queryParameters = queryParameters.append('request.sortCriteria', <any>element);
            })
        }
        if (requestPagingPage !== undefined) {
            queryParameters = queryParameters.set('request.paging.page', <any>requestPagingPage);
        }
        if (requestPagingTotalRecords !== undefined) {
            queryParameters = queryParameters.set('request.paging.totalRecords', <any>requestPagingTotalRecords);
        }
        if (requestPagingRecordsPerPage !== undefined) {
            queryParameters = queryParameters.set('request.paging.recordsPerPage', <any>requestPagingRecordsPerPage);
        }
        if (requestPagingPages !== undefined) {
            queryParameters = queryParameters.set('request.paging.pages', <any>requestPagingPages);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetTemplatesResponse>(`${this.basePath}/api/TemplateManagement/GetAll`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets all template folders. Paging can be specified in the request
     * 
     * @param requestPagingPage 
     * @param requestPagingTotalRecords 
     * @param requestPagingRecordsPerPage 
     * @param requestPagingPages 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public templateManagementGetAllRootFolders(requestPagingPage?: number, requestPagingTotalRecords?: number, requestPagingRecordsPerPage?: number, requestPagingPages?: number, observe?: 'body', reportProgress?: boolean): Observable<GetFoldersResponse>;
    public templateManagementGetAllRootFolders(requestPagingPage?: number, requestPagingTotalRecords?: number, requestPagingRecordsPerPage?: number, requestPagingPages?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetFoldersResponse>>;
    public templateManagementGetAllRootFolders(requestPagingPage?: number, requestPagingTotalRecords?: number, requestPagingRecordsPerPage?: number, requestPagingPages?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetFoldersResponse>>;
    public templateManagementGetAllRootFolders(requestPagingPage?: number, requestPagingTotalRecords?: number, requestPagingRecordsPerPage?: number, requestPagingPages?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (requestPagingPage !== undefined) {
            queryParameters = queryParameters.set('request.paging.page', <any>requestPagingPage);
        }
        if (requestPagingTotalRecords !== undefined) {
            queryParameters = queryParameters.set('request.paging.totalRecords', <any>requestPagingTotalRecords);
        }
        if (requestPagingRecordsPerPage !== undefined) {
            queryParameters = queryParameters.set('request.paging.recordsPerPage', <any>requestPagingRecordsPerPage);
        }
        if (requestPagingPages !== undefined) {
            queryParameters = queryParameters.set('request.paging.pages', <any>requestPagingPages);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<GetFoldersResponse>(`${this.basePath}/api/TemplateManagement/GetAllRootFolders`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets all template versions. Paging, sorting and filtering can be specified in the request
     * 
     * @param requestFilterCriteria 
     * @param requestSortCriteria 
     * @param requestPagingPage 
     * @param requestPagingTotalRecords 
     * @param requestPagingRecordsPerPage 
     * @param requestPagingPages 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public templateManagementGetAllTemplateVersions(requestFilterCriteria?: Array<string>, requestSortCriteria?: Array<string>, requestPagingPage?: number, requestPagingTotalRecords?: number, requestPagingRecordsPerPage?: number, requestPagingPages?: number, observe?: 'body', reportProgress?: boolean): Observable<GetTemplateVersionsResponse>;
    public templateManagementGetAllTemplateVersions(requestFilterCriteria?: Array<string>, requestSortCriteria?: Array<string>, requestPagingPage?: number, requestPagingTotalRecords?: number, requestPagingRecordsPerPage?: number, requestPagingPages?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetTemplateVersionsResponse>>;
    public templateManagementGetAllTemplateVersions(requestFilterCriteria?: Array<string>, requestSortCriteria?: Array<string>, requestPagingPage?: number, requestPagingTotalRecords?: number, requestPagingRecordsPerPage?: number, requestPagingPages?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetTemplateVersionsResponse>>;
    public templateManagementGetAllTemplateVersions(requestFilterCriteria?: Array<string>, requestSortCriteria?: Array<string>, requestPagingPage?: number, requestPagingTotalRecords?: number, requestPagingRecordsPerPage?: number, requestPagingPages?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (requestFilterCriteria) {
            requestFilterCriteria.forEach((element) => {
                queryParameters = queryParameters.append('request.filterCriteria', <any>element);
            })
        }
        if (requestSortCriteria) {
            requestSortCriteria.forEach((element) => {
                queryParameters = queryParameters.append('request.sortCriteria', <any>element);
            })
        }
        if (requestPagingPage !== undefined) {
            queryParameters = queryParameters.set('request.paging.page', <any>requestPagingPage);
        }
        if (requestPagingTotalRecords !== undefined) {
            queryParameters = queryParameters.set('request.paging.totalRecords', <any>requestPagingTotalRecords);
        }
        if (requestPagingRecordsPerPage !== undefined) {
            queryParameters = queryParameters.set('request.paging.recordsPerPage', <any>requestPagingRecordsPerPage);
        }
        if (requestPagingPages !== undefined) {
            queryParameters = queryParameters.set('request.paging.pages', <any>requestPagingPages);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetTemplateVersionsResponse>(`${this.basePath}/api/TemplateManagement/GetAllTemplateVersions`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get default template version by template id
     * 
     * @param templateId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public templateManagementGetDefaultTemplateVersion(templateId: number, observe?: 'body', reportProgress?: boolean): Observable<GetTemplateVersionResponse>;
    public templateManagementGetDefaultTemplateVersion(templateId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetTemplateVersionResponse>>;
    public templateManagementGetDefaultTemplateVersion(templateId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetTemplateVersionResponse>>;
    public templateManagementGetDefaultTemplateVersion(templateId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (templateId === null || templateId === undefined) {
            throw new Error('Required parameter templateId was null or undefined when calling templateManagementGetDefaultTemplateVersion.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (templateId !== undefined) {
            queryParameters = queryParameters.set('templateId', <any>templateId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetTemplateVersionResponse>(`${this.basePath}/api/TemplateManagement/GetDefaultTemplateVersion`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get template version by Id
     * 
     * @param templateVersionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public templateManagementGetTemplateVersion(templateVersionId: number, observe?: 'body', reportProgress?: boolean): Observable<GetTemplateVersionResponse>;
    public templateManagementGetTemplateVersion(templateVersionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetTemplateVersionResponse>>;
    public templateManagementGetTemplateVersion(templateVersionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetTemplateVersionResponse>>;
    public templateManagementGetTemplateVersion(templateVersionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (templateVersionId === null || templateVersionId === undefined) {
            throw new Error('Required parameter templateVersionId was null or undefined when calling templateManagementGetTemplateVersion.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (templateVersionId !== undefined) {
            queryParameters = queryParameters.set('templateVersionId', <any>templateVersionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetTemplateVersionResponse>(`${this.basePath}/api/TemplateManagement/GetTemplateVersion`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Performs search based on template name. Pagination can be specified in the request
     * 
     * @param templateName 
     * @param requestPagingPage 
     * @param requestPagingTotalRecords 
     * @param requestPagingRecordsPerPage 
     * @param requestPagingPages 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public templateManagementSearchByName(templateName: string, requestPagingPage?: number, requestPagingTotalRecords?: number, requestPagingRecordsPerPage?: number, requestPagingPages?: number, observe?: 'body', reportProgress?: boolean): Observable<GetTemplatesResponse>;
    public templateManagementSearchByName(templateName: string, requestPagingPage?: number, requestPagingTotalRecords?: number, requestPagingRecordsPerPage?: number, requestPagingPages?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetTemplatesResponse>>;
    public templateManagementSearchByName(templateName: string, requestPagingPage?: number, requestPagingTotalRecords?: number, requestPagingRecordsPerPage?: number, requestPagingPages?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetTemplatesResponse>>;
    public templateManagementSearchByName(templateName: string, requestPagingPage?: number, requestPagingTotalRecords?: number, requestPagingRecordsPerPage?: number, requestPagingPages?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (templateName === null || templateName === undefined) {
            throw new Error('Required parameter templateName was null or undefined when calling templateManagementSearchByName.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (templateName !== undefined) {
            queryParameters = queryParameters.set('templateName', <any>templateName);
        }
        if (requestPagingPage !== undefined) {
            queryParameters = queryParameters.set('request.paging.page', <any>requestPagingPage);
        }
        if (requestPagingTotalRecords !== undefined) {
            queryParameters = queryParameters.set('request.paging.totalRecords', <any>requestPagingTotalRecords);
        }
        if (requestPagingRecordsPerPage !== undefined) {
            queryParameters = queryParameters.set('request.paging.recordsPerPage', <any>requestPagingRecordsPerPage);
        }
        if (requestPagingPages !== undefined) {
            queryParameters = queryParameters.set('request.paging.pages', <any>requestPagingPages);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<GetTemplatesResponse>(`${this.basePath}/api/TemplateManagement/SearchByName`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
