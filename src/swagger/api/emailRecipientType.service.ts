/**
 * NSI.Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { AddEmailRecipientTypeRequest } from '../model/addEmailRecipientTypeRequest';
import { AddEmailRecipientTypeResponse } from '../model/addEmailRecipientTypeResponse';
import { DeleteEmailRecipientTypeResponse } from '../model/deleteEmailRecipientTypeResponse';
import { GetAllEmailRecipientTypesResponse } from '../model/getAllEmailRecipientTypesResponse';
import { GetEmailRecipientTypeResponse } from '../model/getEmailRecipientTypeResponse';
import { UpdateEmailRecipientTypeRequest } from '../model/updateEmailRecipientTypeRequest';
import { UpdateEmailRecipientTypeResponse } from '../model/updateEmailRecipientTypeResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class EmailRecipientTypeService {

    protected basePath = 'https://localhost:44349';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Adds new email recipient type
     * 
     * @param request {NSI.DataContracts.Notifications.EmailRecipientType.AddEmailRecipientTypeRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public emailRecipientTypeAddEmailRecipientType(request: AddEmailRecipientTypeRequest, observe?: 'body', reportProgress?: boolean): Observable<AddEmailRecipientTypeResponse>;
    public emailRecipientTypeAddEmailRecipientType(request: AddEmailRecipientTypeRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AddEmailRecipientTypeResponse>>;
    public emailRecipientTypeAddEmailRecipientType(request: AddEmailRecipientTypeRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AddEmailRecipientTypeResponse>>;
    public emailRecipientTypeAddEmailRecipientType(request: AddEmailRecipientTypeRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling emailRecipientTypeAddEmailRecipientType.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<AddEmailRecipientTypeResponse>(`${this.basePath}/api/EmailRecipientType/AddEmailRecipientType`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes email recipient type
     * 
     * @param emailRecipientTypeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public emailRecipientTypeDelete(emailRecipientTypeId: number, observe?: 'body', reportProgress?: boolean): Observable<DeleteEmailRecipientTypeResponse>;
    public emailRecipientTypeDelete(emailRecipientTypeId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DeleteEmailRecipientTypeResponse>>;
    public emailRecipientTypeDelete(emailRecipientTypeId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DeleteEmailRecipientTypeResponse>>;
    public emailRecipientTypeDelete(emailRecipientTypeId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (emailRecipientTypeId === null || emailRecipientTypeId === undefined) {
            throw new Error('Required parameter emailRecipientTypeId was null or undefined when calling emailRecipientTypeDelete.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (emailRecipientTypeId !== undefined) {
            queryParameters = queryParameters.set('emailRecipientTypeId', <any>emailRecipientTypeId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<DeleteEmailRecipientTypeResponse>(`${this.basePath}/api/EmailRecipientType/Delete`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves all email recipient types
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public emailRecipientTypeGetAllEmailRecipientTypes(observe?: 'body', reportProgress?: boolean): Observable<GetAllEmailRecipientTypesResponse>;
    public emailRecipientTypeGetAllEmailRecipientTypes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetAllEmailRecipientTypesResponse>>;
    public emailRecipientTypeGetAllEmailRecipientTypes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetAllEmailRecipientTypesResponse>>;
    public emailRecipientTypeGetAllEmailRecipientTypes(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<GetAllEmailRecipientTypesResponse>(`${this.basePath}/api/EmailRecipientType/GetAllEmailRecipientTypes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves single email recipient type by provided ID in request
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public emailRecipientTypeGetEmailRecipientType(id: number, observe?: 'body', reportProgress?: boolean): Observable<GetEmailRecipientTypeResponse>;
    public emailRecipientTypeGetEmailRecipientType(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetEmailRecipientTypeResponse>>;
    public emailRecipientTypeGetEmailRecipientType(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetEmailRecipientTypeResponse>>;
    public emailRecipientTypeGetEmailRecipientType(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling emailRecipientTypeGetEmailRecipientType.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetEmailRecipientTypeResponse>(`${this.basePath}/api/EmailRecipientType/GetEmailRecipientType/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves single email recipient type by provided code in request
     * 
     * @param code 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public emailRecipientTypeGetEmailRecipientTypeByCode(code: string, observe?: 'body', reportProgress?: boolean): Observable<GetEmailRecipientTypeResponse>;
    public emailRecipientTypeGetEmailRecipientTypeByCode(code: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetEmailRecipientTypeResponse>>;
    public emailRecipientTypeGetEmailRecipientTypeByCode(code: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetEmailRecipientTypeResponse>>;
    public emailRecipientTypeGetEmailRecipientTypeByCode(code: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling emailRecipientTypeGetEmailRecipientTypeByCode.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (code !== undefined) {
            queryParameters = queryParameters.set('code', <any>code);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetEmailRecipientTypeResponse>(`${this.basePath}/api/EmailRecipientType/GetEmailRecipientTypeByCode`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates email recipient type
     * 
     * @param request {NSI.DataContracts.Notifications.EmailRecipientType.UpdateEmailRecipientTypeRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public emailRecipientTypeUpdateEmailRecipientType(request: UpdateEmailRecipientTypeRequest, observe?: 'body', reportProgress?: boolean): Observable<UpdateEmailRecipientTypeResponse>;
    public emailRecipientTypeUpdateEmailRecipientType(request: UpdateEmailRecipientTypeRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UpdateEmailRecipientTypeResponse>>;
    public emailRecipientTypeUpdateEmailRecipientType(request: UpdateEmailRecipientTypeRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UpdateEmailRecipientTypeResponse>>;
    public emailRecipientTypeUpdateEmailRecipientType(request: UpdateEmailRecipientTypeRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling emailRecipientTypeUpdateEmailRecipientType.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<UpdateEmailRecipientTypeResponse>(`${this.basePath}/api/EmailRecipientType/UpdateEmailRecipientType`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
