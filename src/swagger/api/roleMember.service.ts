/**
 * NSI.Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { AddRoleMemberRequest } from '../model/addRoleMemberRequest';
import { AddRoleMemberResponse } from '../model/addRoleMemberResponse';
import { DeleteRoleMemberResponse } from '../model/deleteRoleMemberResponse';
import { GetAllRoleMembersResponse } from '../model/getAllRoleMembersResponse';
import { GetRoleMemberByIdResponse } from '../model/getRoleMemberByIdResponse';
import { UpdateRoleMemberRequest } from '../model/updateRoleMemberRequest';
import { UpdateRoleMemberResponse } from '../model/updateRoleMemberResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class RoleMemberService {

    protected basePath = 'https://localhost:44349';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Adds new role member
     * 
     * @param request {NSI.DataContracts.Membership.RoleMember.AddRoleMemberRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public roleMemberAdd(request: AddRoleMemberRequest, observe?: 'body', reportProgress?: boolean): Observable<AddRoleMemberResponse>;
    public roleMemberAdd(request: AddRoleMemberRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AddRoleMemberResponse>>;
    public roleMemberAdd(request: AddRoleMemberRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AddRoleMemberResponse>>;
    public roleMemberAdd(request: AddRoleMemberRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling roleMemberAdd.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<AddRoleMemberResponse>(`${this.basePath}/api/RoleMember/Add`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes role member by user ID
     * 
     * @param userId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public roleMemberDeleteByUserId(userId: number, observe?: 'body', reportProgress?: boolean): Observable<DeleteRoleMemberResponse>;
    public roleMemberDeleteByUserId(userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DeleteRoleMemberResponse>>;
    public roleMemberDeleteByUserId(userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DeleteRoleMemberResponse>>;
    public roleMemberDeleteByUserId(userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling roleMemberDeleteByUserId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userId !== undefined) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<DeleteRoleMemberResponse>(`${this.basePath}/api/RoleMember/DeleteByUserId`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves all role members
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public roleMemberGetAll(observe?: 'body', reportProgress?: boolean): Observable<GetAllRoleMembersResponse>;
    public roleMemberGetAll(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetAllRoleMembersResponse>>;
    public roleMemberGetAll(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetAllRoleMembersResponse>>;
    public roleMemberGetAll(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<GetAllRoleMembersResponse>(`${this.basePath}/api/RoleMember/GetAll`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves a single role member by provided role member ID in request
     * 
     * @param id {System.Int32}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public roleMemberGetById(id: number, observe?: 'body', reportProgress?: boolean): Observable<GetRoleMemberByIdResponse>;
    public roleMemberGetById(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetRoleMemberByIdResponse>>;
    public roleMemberGetById(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetRoleMemberByIdResponse>>;
    public roleMemberGetById(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling roleMemberGetById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetRoleMemberByIdResponse>(`${this.basePath}/api/RoleMember/GetById/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates role member
     * 
     * @param request {NSI.DataContracts.Membership.RoleMember.UpdateRoleMemberRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public roleMemberUpdate(request: UpdateRoleMemberRequest, observe?: 'body', reportProgress?: boolean): Observable<UpdateRoleMemberResponse>;
    public roleMemberUpdate(request: UpdateRoleMemberRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UpdateRoleMemberResponse>>;
    public roleMemberUpdate(request: UpdateRoleMemberRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UpdateRoleMemberResponse>>;
    public roleMemberUpdate(request: UpdateRoleMemberRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling roleMemberUpdate.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<UpdateRoleMemberResponse>(`${this.basePath}/api/RoleMember/Update`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
