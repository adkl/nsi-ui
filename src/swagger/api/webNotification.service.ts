/**
 * NSI.Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { AddWebNotificationRequest } from '../model/addWebNotificationRequest';
import { AddWebNotificationResponse } from '../model/addWebNotificationResponse';
import { GetAllWebNotificationResponse } from '../model/getAllWebNotificationResponse';
import { GetWebNotificationResponse } from '../model/getWebNotificationResponse';
import { UpdateWebNotificationRequest } from '../model/updateWebNotificationRequest';
import { UpdateWebNotificationResponse } from '../model/updateWebNotificationResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class WebNotificationService {

    protected basePath = 'https://localhost:44349';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Adds a single web notification
     * 
     * @param request 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webNotificationAddWebNotification(request: AddWebNotificationRequest, observe?: 'body', reportProgress?: boolean): Observable<AddWebNotificationResponse>;
    public webNotificationAddWebNotification(request: AddWebNotificationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AddWebNotificationResponse>>;
    public webNotificationAddWebNotification(request: AddWebNotificationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AddWebNotificationResponse>>;
    public webNotificationAddWebNotification(request: AddWebNotificationRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling webNotificationAddWebNotification.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<AddWebNotificationResponse>(`${this.basePath}/api/WebNotification/AddWebNotification`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all unseen web notifications
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webNotificationGetAllUnSeenWebNotifications(observe?: 'body', reportProgress?: boolean): Observable<GetAllWebNotificationResponse>;
    public webNotificationGetAllUnSeenWebNotifications(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetAllWebNotificationResponse>>;
    public webNotificationGetAllUnSeenWebNotifications(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetAllWebNotificationResponse>>;
    public webNotificationGetAllUnSeenWebNotifications(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetAllWebNotificationResponse>(`${this.basePath}/api/WebNotification/GetAllUnSeenWebNotifications`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all unseen web notifications addressed to a single user.
     * 
     * @param userId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webNotificationGetAllUnseenWebNotificationsFromUser(userId: number, observe?: 'body', reportProgress?: boolean): Observable<GetAllWebNotificationResponse>;
    public webNotificationGetAllUnseenWebNotificationsFromUser(userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetAllWebNotificationResponse>>;
    public webNotificationGetAllUnseenWebNotificationsFromUser(userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetAllWebNotificationResponse>>;
    public webNotificationGetAllUnseenWebNotificationsFromUser(userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling webNotificationGetAllUnseenWebNotificationsFromUser.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userId !== undefined) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetAllWebNotificationResponse>(`${this.basePath}/api/WebNotification/GetAllUnseenWebNotificationsFromUser`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all web notifications
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webNotificationGetAllWebNotifications(observe?: 'body', reportProgress?: boolean): Observable<GetAllWebNotificationResponse>;
    public webNotificationGetAllWebNotifications(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetAllWebNotificationResponse>>;
    public webNotificationGetAllWebNotifications(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetAllWebNotificationResponse>>;
    public webNotificationGetAllWebNotifications(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetAllWebNotificationResponse>(`${this.basePath}/api/WebNotification/GetAllWebNotifications`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all web notifications addressed to a single user.
     * 
     * @param userId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webNotificationGetAllWebNotificationsFromUser(userId: number, observe?: 'body', reportProgress?: boolean): Observable<GetAllWebNotificationResponse>;
    public webNotificationGetAllWebNotificationsFromUser(userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetAllWebNotificationResponse>>;
    public webNotificationGetAllWebNotificationsFromUser(userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetAllWebNotificationResponse>>;
    public webNotificationGetAllWebNotificationsFromUser(userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling webNotificationGetAllWebNotificationsFromUser.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userId !== undefined) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetAllWebNotificationResponse>(`${this.basePath}/api/WebNotification/GetAllWebNotificationsFromUser`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a single web notification with provided ID
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webNotificationGetWebNotification(id: number, observe?: 'body', reportProgress?: boolean): Observable<GetWebNotificationResponse>;
    public webNotificationGetWebNotification(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetWebNotificationResponse>>;
    public webNotificationGetWebNotification(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetWebNotificationResponse>>;
    public webNotificationGetWebNotification(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling webNotificationGetWebNotification.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetWebNotificationResponse>(`${this.basePath}/api/WebNotification/GetWebNotification/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates all unseen notifications and sets the date seen to UTC now
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webNotificationUpdateAllUnseenWebNotifications(observe?: 'body', reportProgress?: boolean): Observable<UpdateWebNotificationResponse>;
    public webNotificationUpdateAllUnseenWebNotifications(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UpdateWebNotificationResponse>>;
    public webNotificationUpdateAllUnseenWebNotifications(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UpdateWebNotificationResponse>>;
    public webNotificationUpdateAllUnseenWebNotifications(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.put<UpdateWebNotificationResponse>(`${this.basePath}/api/WebNotification/UpdateAllUnseenWebNotifications`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a single unseen notification and sets the date seen to UTC now
     * 
     * @param request 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webNotificationUpdateUnseenWebNotification(request: UpdateWebNotificationRequest, observe?: 'body', reportProgress?: boolean): Observable<UpdateWebNotificationResponse>;
    public webNotificationUpdateUnseenWebNotification(request: UpdateWebNotificationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UpdateWebNotificationResponse>>;
    public webNotificationUpdateUnseenWebNotification(request: UpdateWebNotificationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UpdateWebNotificationResponse>>;
    public webNotificationUpdateUnseenWebNotification(request: UpdateWebNotificationRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling webNotificationUpdateUnseenWebNotification.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<UpdateWebNotificationResponse>(`${this.basePath}/api/WebNotification/UpdateUnseenWebNotification`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
