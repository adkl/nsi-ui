/**
 * NSI.Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { IncidentDomain } from '../model/incidentDomain';
import { POSTIncidentDomain } from '../model/pOSTIncidentDomain';
import { SearchIncidentRequest } from '../model/searchIncidentRequest';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class IncidentService {

    protected basePath = 'https://localhost:44349';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Adds new incident
     * 
     * @param incident 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public incidentAddIncident(incident: POSTIncidentDomain, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public incidentAddIncident(incident: POSTIncidentDomain, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public incidentAddIncident(incident: POSTIncidentDomain, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public incidentAddIncident(incident: POSTIncidentDomain, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (incident === null || incident === undefined) {
            throw new Error('Required parameter incident was null or undefined when calling incidentAddIncident.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<number>(`${this.basePath}/api/Incident/AddIncident`,
            incident,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete incident
     * 
     * @param incidentId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public incidentDeleteIncident(incidentId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public incidentDeleteIncident(incidentId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public incidentDeleteIncident(incidentId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public incidentDeleteIncident(incidentId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (incidentId === null || incidentId === undefined) {
            throw new Error('Required parameter incidentId was null or undefined when calling incidentDeleteIncident.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (incidentId !== undefined) {
            queryParameters = queryParameters.set('incidentId', <any>incidentId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/Incident/DeleteIncident`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Edit incident
     * 
     * @param incident 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public incidentEditIncident(incident: POSTIncidentDomain, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public incidentEditIncident(incident: POSTIncidentDomain, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public incidentEditIncident(incident: POSTIncidentDomain, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public incidentEditIncident(incident: POSTIncidentDomain, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (incident === null || incident === undefined) {
            throw new Error('Required parameter incident was null or undefined when calling incidentEditIncident.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/api/Incident/EditIncident`,
            incident,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves all incidents from system
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public incidentGet(observe?: 'body', reportProgress?: boolean): Observable<Array<IncidentDomain>>;
    public incidentGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IncidentDomain>>>;
    public incidentGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IncidentDomain>>>;
    public incidentGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<IncidentDomain>>(`${this.basePath}/api/Incident/Get`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves incident by provided id
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public incidentGet_1(id: number, observe?: 'body', reportProgress?: boolean): Observable<IncidentDomain>;
    public incidentGet_1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IncidentDomain>>;
    public incidentGet_1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IncidentDomain>>;
    public incidentGet_1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling incidentGet_1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<IncidentDomain>(`${this.basePath}/api/Incident/Get/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves all incidents from system
     * 
     * @param request 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public incidentSearchIncidents(request: SearchIncidentRequest, observe?: 'body', reportProgress?: boolean): Observable<Array<IncidentDomain>>;
    public incidentSearchIncidents(request: SearchIncidentRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IncidentDomain>>>;
    public incidentSearchIncidents(request: SearchIncidentRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IncidentDomain>>>;
    public incidentSearchIncidents(request: SearchIncidentRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling incidentSearchIncidents.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Array<IncidentDomain>>(`${this.basePath}/api/Incident/SearchIncidents`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
