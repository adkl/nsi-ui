/**
 * NSI.Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { AddNotificationUserRequest } from '../model/addNotificationUserRequest';
import { AddNotificationUserResponse } from '../model/addNotificationUserResponse';
import { DeleteNotificationUserResponse } from '../model/deleteNotificationUserResponse';
import { GetAllNotificationUserResponse } from '../model/getAllNotificationUserResponse';
import { GetAllNotificationsResponse } from '../model/getAllNotificationsResponse';
import { GetNotificationUserByIdResponse } from '../model/getNotificationUserByIdResponse';
import { GetNotificationUserByNotificationIdResponse } from '../model/getNotificationUserByNotificationIdResponse';
import { GetNotificationUserByUserIdResponse } from '../model/getNotificationUserByUserIdResponse';
import { UpdateNotificationUserRequest } from '../model/updateNotificationUserRequest';
import { UpdateNotificationUserResponse } from '../model/updateNotificationUserResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class NotificationUserService {

    protected basePath = 'https://localhost:44349';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Adds new NotificationUser record
     * 
     * @param request {NSI.DataContracts.Notifications.NotificationUser.AddNotificationUserRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationUserAdd(request: AddNotificationUserRequest, observe?: 'body', reportProgress?: boolean): Observable<AddNotificationUserResponse>;
    public notificationUserAdd(request: AddNotificationUserRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AddNotificationUserResponse>>;
    public notificationUserAdd(request: AddNotificationUserRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AddNotificationUserResponse>>;
    public notificationUserAdd(request: AddNotificationUserRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling notificationUserAdd.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<AddNotificationUserResponse>(`${this.basePath}/api/NotificationUser/Add`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes NotificationUser record
     * 
     * @param notificationUserId {System.Int32}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationUserDelete(notificationUserId: number, observe?: 'body', reportProgress?: boolean): Observable<DeleteNotificationUserResponse>;
    public notificationUserDelete(notificationUserId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DeleteNotificationUserResponse>>;
    public notificationUserDelete(notificationUserId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DeleteNotificationUserResponse>>;
    public notificationUserDelete(notificationUserId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (notificationUserId === null || notificationUserId === undefined) {
            throw new Error('Required parameter notificationUserId was null or undefined when calling notificationUserDelete.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (notificationUserId !== undefined) {
            queryParameters = queryParameters.set('notificationUserId', <any>notificationUserId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<DeleteNotificationUserResponse>(`${this.basePath}/api/NotificationUser/Delete`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves all records from NotificationUser table
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationUserGetAll(observe?: 'body', reportProgress?: boolean): Observable<GetAllNotificationUserResponse>;
    public notificationUserGetAll(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetAllNotificationUserResponse>>;
    public notificationUserGetAll(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetAllNotificationUserResponse>>;
    public notificationUserGetAll(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<GetAllNotificationUserResponse>(`${this.basePath}/api/NotificationUser/GetAll`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves all notifications by provided userID in request
     * 
     * @param userId {System.Int32}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationUserGetAllNotificationsByUserId(userId: number, observe?: 'body', reportProgress?: boolean): Observable<GetAllNotificationsResponse>;
    public notificationUserGetAllNotificationsByUserId(userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetAllNotificationsResponse>>;
    public notificationUserGetAllNotificationsByUserId(userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetAllNotificationsResponse>>;
    public notificationUserGetAllNotificationsByUserId(userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling notificationUserGetAllNotificationsByUserId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userId !== undefined) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetAllNotificationsResponse>(`${this.basePath}/api/NotificationUser/GetAllNotificationsByUserId`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves a single notificationUser by provided ID in request
     * 
     * @param notificationUserId {System.Int32}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationUserGetById(notificationUserId: number, observe?: 'body', reportProgress?: boolean): Observable<GetNotificationUserByIdResponse>;
    public notificationUserGetById(notificationUserId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetNotificationUserByIdResponse>>;
    public notificationUserGetById(notificationUserId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetNotificationUserByIdResponse>>;
    public notificationUserGetById(notificationUserId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (notificationUserId === null || notificationUserId === undefined) {
            throw new Error('Required parameter notificationUserId was null or undefined when calling notificationUserGetById.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (notificationUserId !== undefined) {
            queryParameters = queryParameters.set('notificationUserId', <any>notificationUserId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetNotificationUserByIdResponse>(`${this.basePath}/api/NotificationUser/GetById`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves all notificationUsers by provided notificationID in request
     * 
     * @param notificationId {System.Int32}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationUserGetByNotificationId(notificationId: number, observe?: 'body', reportProgress?: boolean): Observable<GetNotificationUserByNotificationIdResponse>;
    public notificationUserGetByNotificationId(notificationId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetNotificationUserByNotificationIdResponse>>;
    public notificationUserGetByNotificationId(notificationId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetNotificationUserByNotificationIdResponse>>;
    public notificationUserGetByNotificationId(notificationId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (notificationId === null || notificationId === undefined) {
            throw new Error('Required parameter notificationId was null or undefined when calling notificationUserGetByNotificationId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (notificationId !== undefined) {
            queryParameters = queryParameters.set('notificationId', <any>notificationId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetNotificationUserByNotificationIdResponse>(`${this.basePath}/api/NotificationUser/GetByNotificationId`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves all notificationUsers by provided userID in request
     * 
     * @param userId {System.Int32}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationUserGetByUserId(userId: number, observe?: 'body', reportProgress?: boolean): Observable<GetNotificationUserByUserIdResponse>;
    public notificationUserGetByUserId(userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetNotificationUserByUserIdResponse>>;
    public notificationUserGetByUserId(userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetNotificationUserByUserIdResponse>>;
    public notificationUserGetByUserId(userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling notificationUserGetByUserId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userId !== undefined) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetNotificationUserByUserIdResponse>(`${this.basePath}/api/NotificationUser/GetByUserId`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates NotificationUser table record
     * 
     * @param request {NSI.DataContracts.Notifications.NotificationUser.UpdateNotificationUserRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationUserUpdate(request: UpdateNotificationUserRequest, observe?: 'body', reportProgress?: boolean): Observable<UpdateNotificationUserResponse>;
    public notificationUserUpdate(request: UpdateNotificationUserRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UpdateNotificationUserResponse>>;
    public notificationUserUpdate(request: UpdateNotificationUserRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UpdateNotificationUserResponse>>;
    public notificationUserUpdate(request: UpdateNotificationUserRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling notificationUserUpdate.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<UpdateNotificationUserResponse>(`${this.basePath}/api/NotificationUser/Update`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
