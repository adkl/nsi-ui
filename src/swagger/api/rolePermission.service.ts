/**
 * NSI.Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { AddRolePermissionRequest } from '../model/addRolePermissionRequest';
import { AddRolePermissionResponse } from '../model/addRolePermissionResponse';
import { DeleteRolePermissionResponse } from '../model/deleteRolePermissionResponse';
import { GetRolePermissionResponse } from '../model/getRolePermissionResponse';
import { UpdateRolePermissionRequest } from '../model/updateRolePermissionRequest';
import { UpdateRolePermissionResponse } from '../model/updateRolePermissionResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class RolePermissionService {

    protected basePath = 'https://localhost:44349';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Adds new  role permission
     * 
     * @param request {NSI.DataContracts.Membership.RolePermissions.AddRolePermissionRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rolePermissionAddRolePermission(request: AddRolePermissionRequest, observe?: 'body', reportProgress?: boolean): Observable<AddRolePermissionResponse>;
    public rolePermissionAddRolePermission(request: AddRolePermissionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AddRolePermissionResponse>>;
    public rolePermissionAddRolePermission(request: AddRolePermissionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AddRolePermissionResponse>>;
    public rolePermissionAddRolePermission(request: AddRolePermissionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling rolePermissionAddRolePermission.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<AddRolePermissionResponse>(`${this.basePath}/api/RolePermission/AddRolePermission`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes role permissions by permission ID
     * 
     * @param permissionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rolePermissionDeleteByPermissionId(permissionId: number, observe?: 'body', reportProgress?: boolean): Observable<DeleteRolePermissionResponse>;
    public rolePermissionDeleteByPermissionId(permissionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DeleteRolePermissionResponse>>;
    public rolePermissionDeleteByPermissionId(permissionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DeleteRolePermissionResponse>>;
    public rolePermissionDeleteByPermissionId(permissionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (permissionId === null || permissionId === undefined) {
            throw new Error('Required parameter permissionId was null or undefined when calling rolePermissionDeleteByPermissionId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (permissionId !== undefined) {
            queryParameters = queryParameters.set('permissionId', <any>permissionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<DeleteRolePermissionResponse>(`${this.basePath}/api/RolePermission/DeleteByPermissionId`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes role permissions by role ID
     * 
     * @param roleId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rolePermissionDeleteByRoleId(roleId: number, observe?: 'body', reportProgress?: boolean): Observable<DeleteRolePermissionResponse>;
    public rolePermissionDeleteByRoleId(roleId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DeleteRolePermissionResponse>>;
    public rolePermissionDeleteByRoleId(roleId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DeleteRolePermissionResponse>>;
    public rolePermissionDeleteByRoleId(roleId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (roleId === null || roleId === undefined) {
            throw new Error('Required parameter roleId was null or undefined when calling rolePermissionDeleteByRoleId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (roleId !== undefined) {
            queryParameters = queryParameters.set('roleId', <any>roleId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<DeleteRolePermissionResponse>(`${this.basePath}/api/RolePermission/DeleteByRoleId`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves single role permission by provided ID in request
     * 
     * @param id {NSI.DataContracts.Membership.RolePermissions.GetRolePermissionRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rolePermissionGetRolePermission(id: number, observe?: 'body', reportProgress?: boolean): Observable<GetRolePermissionResponse>;
    public rolePermissionGetRolePermission(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetRolePermissionResponse>>;
    public rolePermissionGetRolePermission(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetRolePermissionResponse>>;
    public rolePermissionGetRolePermission(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling rolePermissionGetRolePermission.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetRolePermissionResponse>(`${this.basePath}/api/RolePermission/GetRolePermission/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates role permission
     * 
     * @param request {NSI.DataContracts.Membership.RolePermissions.UpdateRolePermissionRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rolePermissionUpdateRolePermission(request: UpdateRolePermissionRequest, observe?: 'body', reportProgress?: boolean): Observable<UpdateRolePermissionResponse>;
    public rolePermissionUpdateRolePermission(request: UpdateRolePermissionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UpdateRolePermissionResponse>>;
    public rolePermissionUpdateRolePermission(request: UpdateRolePermissionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UpdateRolePermissionResponse>>;
    public rolePermissionUpdateRolePermission(request: UpdateRolePermissionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling rolePermissionUpdateRolePermission.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<UpdateRolePermissionResponse>(`${this.basePath}/api/RolePermission/UpdateRolePermission`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
