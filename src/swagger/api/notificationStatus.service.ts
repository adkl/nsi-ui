/**
 * NSI.Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { AddNotificationStatusRequest } from '../model/addNotificationStatusRequest';
import { AddNotificationStatusResponse } from '../model/addNotificationStatusResponse';
import { DeleteNotificationStatusRequest } from '../model/deleteNotificationStatusRequest';
import { DeleteNotificationStatusResponse } from '../model/deleteNotificationStatusResponse';
import { GetAllNotificationStatusResponse } from '../model/getAllNotificationStatusResponse';
import { GetNotificationStatusByCodeResponse } from '../model/getNotificationStatusByCodeResponse';
import { GetNotificationStatusResponse } from '../model/getNotificationStatusResponse';
import { SearchNotificationStatusRequest } from '../model/searchNotificationStatusRequest';
import { SearchNotificationStatusResponse } from '../model/searchNotificationStatusResponse';
import { UpdateNotificationStatusRequest } from '../model/updateNotificationStatusRequest';
import { UpdateNotificationStatusResponse } from '../model/updateNotificationStatusResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class NotificationStatusService {

    protected basePath = 'https://localhost:44349';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Adds new notification status
     * 
     * @param request {NSI.DataContracts.Notifications.NotificationStatus.AddNotificationStatusRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationStatusAddNotificationStatus(request: AddNotificationStatusRequest, observe?: 'body', reportProgress?: boolean): Observable<AddNotificationStatusResponse>;
    public notificationStatusAddNotificationStatus(request: AddNotificationStatusRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AddNotificationStatusResponse>>;
    public notificationStatusAddNotificationStatus(request: AddNotificationStatusRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AddNotificationStatusResponse>>;
    public notificationStatusAddNotificationStatus(request: AddNotificationStatusRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling notificationStatusAddNotificationStatus.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<AddNotificationStatusResponse>(`${this.basePath}/api/NotificationStatus/AddNotificationStatus`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes notification status
     * 
     * @param request {NSI.DataContracts.Notifications.NotificationStatus.DeleteNotificationStatusRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationStatusDelete(request: DeleteNotificationStatusRequest, observe?: 'body', reportProgress?: boolean): Observable<DeleteNotificationStatusResponse>;
    public notificationStatusDelete(request: DeleteNotificationStatusRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DeleteNotificationStatusResponse>>;
    public notificationStatusDelete(request: DeleteNotificationStatusRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DeleteNotificationStatusResponse>>;
    public notificationStatusDelete(request: DeleteNotificationStatusRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling notificationStatusDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.delete<DeleteNotificationStatusResponse>(`${this.basePath}/api/NotificationStatus/Delete`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves all NotificationStatus
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationStatusGetAllNotificationStatus(observe?: 'body', reportProgress?: boolean): Observable<GetAllNotificationStatusResponse>;
    public notificationStatusGetAllNotificationStatus(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetAllNotificationStatusResponse>>;
    public notificationStatusGetAllNotificationStatus(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetAllNotificationStatusResponse>>;
    public notificationStatusGetAllNotificationStatus(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<GetAllNotificationStatusResponse>(`${this.basePath}/api/NotificationStatus/GetAllNotificationStatus`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves single NotificationStatus by provided ID in request
     * 
     * @param id {NSI.DataContracts.Notifications.NotificationStatus.GetNotificationStatusRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationStatusGetNotificationStatus(id: number, observe?: 'body', reportProgress?: boolean): Observable<GetNotificationStatusResponse>;
    public notificationStatusGetNotificationStatus(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetNotificationStatusResponse>>;
    public notificationStatusGetNotificationStatus(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetNotificationStatusResponse>>;
    public notificationStatusGetNotificationStatus(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling notificationStatusGetNotificationStatus.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetNotificationStatusResponse>(`${this.basePath}/api/NotificationStatus/GetNotificationStatus/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves single NotificationStatus by provided code in request
     * 
     * @param code {NSI.DataContracts.Notifications.NotificationStatus.GetNotificationStatusByCodeRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationStatusGetNotificationStatusByCode(code: string, observe?: 'body', reportProgress?: boolean): Observable<GetNotificationStatusByCodeResponse>;
    public notificationStatusGetNotificationStatusByCode(code: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetNotificationStatusByCodeResponse>>;
    public notificationStatusGetNotificationStatusByCode(code: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetNotificationStatusByCodeResponse>>;
    public notificationStatusGetNotificationStatusByCode(code: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling notificationStatusGetNotificationStatusByCode.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (code !== undefined) {
            queryParameters = queryParameters.set('Code', <any>code);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetNotificationStatusByCodeResponse>(`${this.basePath}/api/NotificationStatus/GetNotificationStatusByCode`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Searches notification statuses. If no parameters have been provided in request, return all permissions.
     * 
     * @param request {NSI.DataContracts.Notifications.NotificationStatus.SearchNotificationStatusRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationStatusSearchNotificationStatus(request: SearchNotificationStatusRequest, observe?: 'body', reportProgress?: boolean): Observable<SearchNotificationStatusResponse>;
    public notificationStatusSearchNotificationStatus(request: SearchNotificationStatusRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SearchNotificationStatusResponse>>;
    public notificationStatusSearchNotificationStatus(request: SearchNotificationStatusRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SearchNotificationStatusResponse>>;
    public notificationStatusSearchNotificationStatus(request: SearchNotificationStatusRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling notificationStatusSearchNotificationStatus.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<SearchNotificationStatusResponse>(`${this.basePath}/api/NotificationStatus/SearchNotificationStatus`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates notification status
     * 
     * @param request {NSI.DataContracts.Notifications.NotificationStatus.UpdateNotificationStatusRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public notificationStatusUpdateNotificationStatus(request: UpdateNotificationStatusRequest, observe?: 'body', reportProgress?: boolean): Observable<UpdateNotificationStatusResponse>;
    public notificationStatusUpdateNotificationStatus(request: UpdateNotificationStatusRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UpdateNotificationStatusResponse>>;
    public notificationStatusUpdateNotificationStatus(request: UpdateNotificationStatusRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UpdateNotificationStatusResponse>>;
    public notificationStatusUpdateNotificationStatus(request: UpdateNotificationStatusRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling notificationStatusUpdateNotificationStatus.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<UpdateNotificationStatusResponse>(`${this.basePath}/api/NotificationStatus/UpdateNotificationStatus`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
