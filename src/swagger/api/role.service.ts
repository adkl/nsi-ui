/**
 * NSI.Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { AddRoleRequest } from '../model/addRoleRequest';
import { AddRoleResponse } from '../model/addRoleResponse';
import { GetAllRolesResponse } from '../model/getAllRolesResponse';
import { GetRoleResponse } from '../model/getRoleResponse';
import { RoleForListViewModel } from '../model/roleForListViewModel';
import { SearchRolesRequest } from '../model/searchRolesRequest';
import { SearchRolesResponse } from '../model/searchRolesResponse';
import { UpdateRoleRequest } from '../model/updateRoleRequest';
import { UpdateRoleResponse } from '../model/updateRoleResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class RoleService {

    protected basePath = 'https://localhost:44349';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Adds new role
     * 
     * @param request {NSI.DataContracts.Membership.Roles.AddRoleRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public roleAddRole(request: AddRoleRequest, observe?: 'body', reportProgress?: boolean): Observable<AddRoleResponse>;
    public roleAddRole(request: AddRoleRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AddRoleResponse>>;
    public roleAddRole(request: AddRoleRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AddRoleResponse>>;
    public roleAddRole(request: AddRoleRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling roleAddRole.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<AddRoleResponse>(`${this.basePath}/api/Role/AddRole`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves all roles
     * 
     * @param searchTerm 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public roleGet(searchTerm?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<RoleForListViewModel>>;
    public roleGet(searchTerm?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<RoleForListViewModel>>>;
    public roleGet(searchTerm?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<RoleForListViewModel>>>;
    public roleGet(searchTerm?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (searchTerm !== undefined) {
            queryParameters = queryParameters.set('searchTerm', <any>searchTerm);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<RoleForListViewModel>>(`${this.basePath}/api/roles`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves all roles
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public roleGetAll(observe?: 'body', reportProgress?: boolean): Observable<GetAllRolesResponse>;
    public roleGetAll(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetAllRolesResponse>>;
    public roleGetAll(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetAllRolesResponse>>;
    public roleGetAll(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<GetAllRolesResponse>(`${this.basePath}/api/Role/GetAll`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves a single role by provided role ID in request
     * 
     * @param roleId {System.Int32}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public roleGetById(roleId: number, observe?: 'body', reportProgress?: boolean): Observable<GetRoleResponse>;
    public roleGetById(roleId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetRoleResponse>>;
    public roleGetById(roleId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetRoleResponse>>;
    public roleGetById(roleId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (roleId === null || roleId === undefined) {
            throw new Error('Required parameter roleId was null or undefined when calling roleGetById.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (roleId !== undefined) {
            queryParameters = queryParameters.set('roleId', <any>roleId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetRoleResponse>(`${this.basePath}/api/Role/GetById`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Searches roles. If no parameters have been provided in request, return all roles.
     * 
     * @param request {NSI.DataContracts.Membership.Roles.SearchRolesRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public roleSearchRoles(request: SearchRolesRequest, observe?: 'body', reportProgress?: boolean): Observable<SearchRolesResponse>;
    public roleSearchRoles(request: SearchRolesRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SearchRolesResponse>>;
    public roleSearchRoles(request: SearchRolesRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SearchRolesResponse>>;
    public roleSearchRoles(request: SearchRolesRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling roleSearchRoles.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<SearchRolesResponse>(`${this.basePath}/api/Role/SearchRoles`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates role
     * 
     * @param request {NSI.DataContracts.Membership.Roles.UpdateRoleRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public roleUpdateRole(request: UpdateRoleRequest, observe?: 'body', reportProgress?: boolean): Observable<UpdateRoleResponse>;
    public roleUpdateRole(request: UpdateRoleRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UpdateRoleResponse>>;
    public roleUpdateRole(request: UpdateRoleRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UpdateRoleResponse>>;
    public roleUpdateRole(request: UpdateRoleRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling roleUpdateRole.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<UpdateRoleResponse>(`${this.basePath}/api/Role/UpdateRole`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
