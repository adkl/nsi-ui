/**
 * NSI.Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { DevicePingDomain } from '../model/devicePingDomain';
import { DevicePropertyValue } from '../model/devicePropertyValue';
import { SearchDevicePingRequest } from '../model/searchDevicePingRequest';
import { SearchDevicePingResponse } from '../model/searchDevicePingResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DevicePingService {

    protected basePath = 'https://localhost:44349';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Delete device ping object
     * 
     * @param devicePingId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public devicePingDelete(devicePingId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public devicePingDelete(devicePingId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public devicePingDelete(devicePingId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public devicePingDelete(devicePingId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (devicePingId === null || devicePingId === undefined) {
            throw new Error('Required parameter devicePingId was null or undefined when calling devicePingDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/DevicePing/Delete/${encodeURIComponent(String(devicePingId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get device ping object by id
     * 
     * @param devicePingId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public devicePingGetDevicePingById(devicePingId: number, observe?: 'body', reportProgress?: boolean): Observable<DevicePingDomain>;
    public devicePingGetDevicePingById(devicePingId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DevicePingDomain>>;
    public devicePingGetDevicePingById(devicePingId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DevicePingDomain>>;
    public devicePingGetDevicePingById(devicePingId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (devicePingId === null || devicePingId === undefined) {
            throw new Error('Required parameter devicePingId was null or undefined when calling devicePingGetDevicePingById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<DevicePingDomain>(`${this.basePath}/api/DevicePing/GetById/${encodeURIComponent(String(devicePingId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add new device ping object
     * 
     * @param devicePropertyValues 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public devicePingPost(devicePropertyValues: Array<DevicePropertyValue>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public devicePingPost(devicePropertyValues: Array<DevicePropertyValue>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public devicePingPost(devicePropertyValues: Array<DevicePropertyValue>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public devicePingPost(devicePropertyValues: Array<DevicePropertyValue>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (devicePropertyValues === null || devicePropertyValues === undefined) {
            throw new Error('Required parameter devicePropertyValues was null or undefined when calling devicePingPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/DevicePing/Post`,
            devicePropertyValues,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Searches devicePing. If no parameters have been provided in request, return all devicePings.
     * 
     * @param request 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public devicePingSearch(request: SearchDevicePingRequest, observe?: 'body', reportProgress?: boolean): Observable<SearchDevicePingResponse>;
    public devicePingSearch(request: SearchDevicePingRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SearchDevicePingResponse>>;
    public devicePingSearch(request: SearchDevicePingRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SearchDevicePingResponse>>;
    public devicePingSearch(request: SearchDevicePingRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling devicePingSearch.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<SearchDevicePingResponse>(`${this.basePath}/api/DevicePing/Search`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
