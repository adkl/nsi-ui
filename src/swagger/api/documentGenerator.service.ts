/**
 * NSI.Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { DocumentTypeDomain } from '../model/documentTypeDomain';
import { GenerateDocumentRequest } from '../model/generateDocumentRequest';
import { GetGeneratedDocResponse } from '../model/getGeneratedDocResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DocumentGeneratorService {

    protected basePath = 'https://localhost:44349';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Converts HTML file to DOCX document
     * 
     * @param request {NSI.DataContracts.Document.GenerateDocumentRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public documentGeneratorGenerateDocxFromHtml(request: GenerateDocumentRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public documentGeneratorGenerateDocxFromHtml(request: GenerateDocumentRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public documentGeneratorGenerateDocxFromHtml(request: GenerateDocumentRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public documentGeneratorGenerateDocxFromHtml(request: GenerateDocumentRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling documentGeneratorGenerateDocxFromHtml.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/DocumentGenerator/GenerateDocxFromHtml`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Converts JSON file to DOCX document
     * 
     * @param request {NSI.DataContracts.Document.GenerateDocumentRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public documentGeneratorGenerateDocxFromJson(request: GenerateDocumentRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public documentGeneratorGenerateDocxFromJson(request: GenerateDocumentRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public documentGeneratorGenerateDocxFromJson(request: GenerateDocumentRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public documentGeneratorGenerateDocxFromJson(request: GenerateDocumentRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling documentGeneratorGenerateDocxFromJson.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/DocumentGenerator/GenerateDocxFromJson`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Converts JSON object to HTML file
     * 
     * @param request {NSI.DataContracts.Document.GenerateDocumentRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public documentGeneratorGenerateHtmlFromJson(request: GenerateDocumentRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public documentGeneratorGenerateHtmlFromJson(request: GenerateDocumentRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public documentGeneratorGenerateHtmlFromJson(request: GenerateDocumentRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public documentGeneratorGenerateHtmlFromJson(request: GenerateDocumentRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling documentGeneratorGenerateHtmlFromJson.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/DocumentGenerator/GenerateHtmlFromJson`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Converts HTML file to ODT document
     * 
     * @param request {NSI.DataContracts.Document.GenerateDocumentRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public documentGeneratorGenerateOdtFromHtml(request: GenerateDocumentRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public documentGeneratorGenerateOdtFromHtml(request: GenerateDocumentRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public documentGeneratorGenerateOdtFromHtml(request: GenerateDocumentRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public documentGeneratorGenerateOdtFromHtml(request: GenerateDocumentRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling documentGeneratorGenerateOdtFromHtml.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/DocumentGenerator/GenerateOdtFromHtml`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Converts JSON file to ODT document
     * 
     * @param request {NSI.DataContracts.Document.GenerateDocumentRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public documentGeneratorGenerateOdtFromJson(request: GenerateDocumentRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public documentGeneratorGenerateOdtFromJson(request: GenerateDocumentRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public documentGeneratorGenerateOdtFromJson(request: GenerateDocumentRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public documentGeneratorGenerateOdtFromJson(request: GenerateDocumentRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling documentGeneratorGenerateOdtFromJson.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/DocumentGenerator/GenerateOdtFromJson`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Converts HTML file to PDF document
     * 
     * @param request {NSI.DataContracts.Document.GenerateDocumentRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public documentGeneratorGeneratePdfFromHtml(request: GenerateDocumentRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public documentGeneratorGeneratePdfFromHtml(request: GenerateDocumentRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public documentGeneratorGeneratePdfFromHtml(request: GenerateDocumentRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public documentGeneratorGeneratePdfFromHtml(request: GenerateDocumentRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling documentGeneratorGeneratePdfFromHtml.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/DocumentGenerator/GeneratePdfFromHtml`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Converts JSON object to PDF document
     * 
     * @param request {NSI.DataContracts.Document.GenerateDocumentRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public documentGeneratorGeneratePdfFromJson(request: GenerateDocumentRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public documentGeneratorGeneratePdfFromJson(request: GenerateDocumentRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public documentGeneratorGeneratePdfFromJson(request: GenerateDocumentRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public documentGeneratorGeneratePdfFromJson(request: GenerateDocumentRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling documentGeneratorGeneratePdfFromJson.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/DocumentGenerator/GeneratePdfFromJson`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all document types
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public documentGeneratorGetAllDocTypes(observe?: 'body', reportProgress?: boolean): Observable<Array<DocumentTypeDomain>>;
    public documentGeneratorGetAllDocTypes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DocumentTypeDomain>>>;
    public documentGeneratorGetAllDocTypes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DocumentTypeDomain>>>;
    public documentGeneratorGetAllDocTypes(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<DocumentTypeDomain>>(`${this.basePath}/api/DocumentGenerator/GetAllDocTypes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns generated documents specified by page
     * 
     * @param requestFilterCriteria 
     * @param requestSortCriteria 
     * @param requestPagingPage 
     * @param requestPagingTotalRecords 
     * @param requestPagingRecordsPerPage 
     * @param requestPagingPages 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public documentGeneratorGetAllLogs(requestFilterCriteria?: Array<string>, requestSortCriteria?: Array<string>, requestPagingPage?: number, requestPagingTotalRecords?: number, requestPagingRecordsPerPage?: number, requestPagingPages?: number, observe?: 'body', reportProgress?: boolean): Observable<GetGeneratedDocResponse>;
    public documentGeneratorGetAllLogs(requestFilterCriteria?: Array<string>, requestSortCriteria?: Array<string>, requestPagingPage?: number, requestPagingTotalRecords?: number, requestPagingRecordsPerPage?: number, requestPagingPages?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetGeneratedDocResponse>>;
    public documentGeneratorGetAllLogs(requestFilterCriteria?: Array<string>, requestSortCriteria?: Array<string>, requestPagingPage?: number, requestPagingTotalRecords?: number, requestPagingRecordsPerPage?: number, requestPagingPages?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetGeneratedDocResponse>>;
    public documentGeneratorGetAllLogs(requestFilterCriteria?: Array<string>, requestSortCriteria?: Array<string>, requestPagingPage?: number, requestPagingTotalRecords?: number, requestPagingRecordsPerPage?: number, requestPagingPages?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (requestFilterCriteria) {
            requestFilterCriteria.forEach((element) => {
                queryParameters = queryParameters.append('request.filterCriteria', <any>element);
            })
        }
        if (requestSortCriteria) {
            requestSortCriteria.forEach((element) => {
                queryParameters = queryParameters.append('request.sortCriteria', <any>element);
            })
        }
        if (requestPagingPage !== undefined) {
            queryParameters = queryParameters.set('request.paging.page', <any>requestPagingPage);
        }
        if (requestPagingTotalRecords !== undefined) {
            queryParameters = queryParameters.set('request.paging.totalRecords', <any>requestPagingTotalRecords);
        }
        if (requestPagingRecordsPerPage !== undefined) {
            queryParameters = queryParameters.set('request.paging.recordsPerPage', <any>requestPagingRecordsPerPage);
        }
        if (requestPagingPages !== undefined) {
            queryParameters = queryParameters.set('request.paging.pages', <any>requestPagingPages);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];

        return this.httpClient.get<GetGeneratedDocResponse>(`${this.basePath}/api/DocumentGenerator/GetAllLogs`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
