/**
 * NSI.Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { AddSmsRequest } from '../model/addSmsRequest';
import { AddSmsResponse } from '../model/addSmsResponse';
import { DeleteSmsRequest } from '../model/deleteSmsRequest';
import { DeleteSmsResponse } from '../model/deleteSmsResponse';
import { GetSmsByNotificationIdResponse } from '../model/getSmsByNotificationIdResponse';
import { GetSmsResponse } from '../model/getSmsResponse';
import { SearchSmsRequest } from '../model/searchSmsRequest';
import { SearchSmsResponse } from '../model/searchSmsResponse';
import { SendSmsRequest } from '../model/sendSmsRequest';
import { SendSmsResponse } from '../model/sendSmsResponse';
import { UpdateSmsRequest } from '../model/updateSmsRequest';
import { UpdateSmsResponse } from '../model/updateSmsResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SmsService {

    protected basePath = 'https://localhost:44349';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Adds new sms
     * 
     * @param request {NSI.DataContracts.Notifications.Sms.AddSmsRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public smsAddSms(request: AddSmsRequest, observe?: 'body', reportProgress?: boolean): Observable<AddSmsResponse>;
    public smsAddSms(request: AddSmsRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AddSmsResponse>>;
    public smsAddSms(request: AddSmsRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AddSmsResponse>>;
    public smsAddSms(request: AddSmsRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling smsAddSms.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<AddSmsResponse>(`${this.basePath}/api/Sms/AddSms`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes sms
     * 
     * @param request {NSI.DataContracts.Notifications.Sms.DeleteSmsRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public smsDelete(request: DeleteSmsRequest, observe?: 'body', reportProgress?: boolean): Observable<DeleteSmsResponse>;
    public smsDelete(request: DeleteSmsRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DeleteSmsResponse>>;
    public smsDelete(request: DeleteSmsRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DeleteSmsResponse>>;
    public smsDelete(request: DeleteSmsRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling smsDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.delete<DeleteSmsResponse>(`${this.basePath}/api/Sms/Delete`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves single Sms by provided ID in request
     * 
     * @param id {NSI.DataContracts.Notifications.Sms.GetSmsRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public smsGetSms(id: number, observe?: 'body', reportProgress?: boolean): Observable<GetSmsResponse>;
    public smsGetSms(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetSmsResponse>>;
    public smsGetSms(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetSmsResponse>>;
    public smsGetSms(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling smsGetSms.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetSmsResponse>(`${this.basePath}/api/Sms/GetSms/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves single Sms by provided ID in request
     * 
     * @param notificationId {NSI.DataContracts.Notifications.Sms.GetSmsByNotificationIdRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public smsGetSmsByNotificationId(notificationId: number, observe?: 'body', reportProgress?: boolean): Observable<GetSmsByNotificationIdResponse>;
    public smsGetSmsByNotificationId(notificationId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetSmsByNotificationIdResponse>>;
    public smsGetSmsByNotificationId(notificationId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetSmsByNotificationIdResponse>>;
    public smsGetSmsByNotificationId(notificationId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (notificationId === null || notificationId === undefined) {
            throw new Error('Required parameter notificationId was null or undefined when calling smsGetSmsByNotificationId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (notificationId !== undefined) {
            queryParameters = queryParameters.set('notificationId', <any>notificationId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<GetSmsByNotificationIdResponse>(`${this.basePath}/api/Sms/GetSmsByNotificationId`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Searches SMS. If no parameters have been provided in request, return all permissions.
     * 
     * @param request {NSI.DataContracts.Notifications.Sms.SearchSmsRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public smsSearchSms(request: SearchSmsRequest, observe?: 'body', reportProgress?: boolean): Observable<SearchSmsResponse>;
    public smsSearchSms(request: SearchSmsRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SearchSmsResponse>>;
    public smsSearchSms(request: SearchSmsRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SearchSmsResponse>>;
    public smsSearchSms(request: SearchSmsRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling smsSearchSms.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<SearchSmsResponse>(`${this.basePath}/api/Sms/SearchSms`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sends sms
     * 
     * @param request {NSI.DataContracts.Notifications.Sms.SendSmsRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public smsSendTestSms(request: SendSmsRequest, observe?: 'body', reportProgress?: boolean): Observable<SendSmsResponse>;
    public smsSendTestSms(request: SendSmsRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SendSmsResponse>>;
    public smsSendTestSms(request: SendSmsRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SendSmsResponse>>;
    public smsSendTestSms(request: SendSmsRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling smsSendTestSms.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<SendSmsResponse>(`${this.basePath}/api/Sms/SendTestSms`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates sms
     * 
     * @param request {NSI.DataContracts.Notifications.Sms.UpdateSmsRequest}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public smsUpdateSms(request: UpdateSmsRequest, observe?: 'body', reportProgress?: boolean): Observable<UpdateSmsResponse>;
    public smsUpdateSms(request: UpdateSmsRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UpdateSmsResponse>>;
    public smsUpdateSms(request: UpdateSmsRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UpdateSmsResponse>>;
    public smsUpdateSms(request: UpdateSmsRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling smsUpdateSms.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<UpdateSmsResponse>(`${this.basePath}/api/Sms/UpdateSms`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
